// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  PROFESSOR
  STAFF
  ADMIN
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  password    String
  health      HealthInfo?
  role        Role         @default(STUDENT)
  studentInfo StudentInfo?
  faculty     Faculty?
  Booking     Booking[]
}

model HealthInfo {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  weight           Float
  height           Float
  bloodType        String
  emergencyContact String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model StudentInfo {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  user                   User     @relation(fields: [userId], references: [id])
  jeemainsRollNo         String   @unique
  jeeadvRollNo           String   @unique
  degree                 String
  branch                 Branch   @relation(fields: [branchId], references: [id])
  branchId               Int
  joiningYear            Int
  expectedGraduationYear Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model GuestHouse {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  description String
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
}

model Room {
  id           Int        @id @default(autoincrement())
  guestHouse   GuestHouse @relation(fields: [guestHouseId], references: [id])
  guestHouseId Int
  roomNo       String     @unique
  roomType     String
  roomStatus   RoomStatus @default(AVAILABLE)
  description  String?
  bookings     Booking[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  checkIn   DateTime
  checkOut  DateTime
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id        Int           @id @default(autoincrement())
  name      String
  students  StudentInfo[]
  faculty   Faculty[]
  courses   Course[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Faculty {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  branch    Branch   @relation(fields: [branchId], references: [id])
  branchId  Int
  courses   Course[] @relation(name: "CourseFaculty")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id        Int       @id @default(autoincrement())
  name      String
  code      String    @unique
  branch    Branch    @relation(fields: [branchId], references: [id])
  branchId  Int
  faculty   Faculty[] @relation(name: "CourseFaculty")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}